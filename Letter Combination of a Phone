/* Letter Combinations of a Phone Number

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]

*/


import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class LetterCombinationsOfAPhoneNumber {
	static class Solution {
	    private static final String[] mapping = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};

	    public List<String> letterCombinations(String digits) {
	        List<String> result = new ArrayList<>();
	        if (digits == null || digits.length() == 0) {
	            return result;
	        }
	        backtrack("", digits, 0, result);
	        return result;
	    }

	    private void backtrack(String combination, String digits, int index, List<String> result) {
	        if (index == digits.length()) {
	            result.add(combination);
	            return;
	        }
	        String letters = mapping[digits.charAt(index) - '0'];
	        for (int i = 0; i < letters.length(); i++) {
	            backtrack(combination + letters.charAt(i), digits, index + 1, result);
	        }
	    }
	    
	}
	public static void main(String arg[]){
		
		Solution obj = new Solution();
		Scanner s =  new Scanner(System.in);
		String str = s.nextLine();
		List<String> result = obj.letterCombinations(str);
		System.out.println(result);
	}

}

